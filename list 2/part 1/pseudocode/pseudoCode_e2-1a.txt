// Primeiro definimos a classe responsável pelas operações de alinhamento

Classe: Alinhador
Recebe os parâmetros:
    seq1 - sequência 1
    seq2 - sequencia 2
    penalidadeGap
    penalidadeMiss
    scoreDeMatch

Construtor:
    Todos os parâmetros viram atributo do objeto, além dos atributos
    * scoreFinal   // que começa com 0
    * identidade    // que começa com 0
    * matrizAlinhamento     // matriz de zeros com (n x m) = (len(seq1)+1, len(seq2)+1)
    * matrizDeTraceBack     // matriz de zeros com (n x m) = (len(seq1)+1, len(seq2)+1)
    // a matriz de trace back será preenchida com caracteres indicando como foi construída
    // a matriz de alinhamento. Onde d: diagonal; l: esquerda; u: cima; f: posição (0,0)
    * string1   // Resultado de alinhamento da seq1
    * string2   // Resultado de alinhamento da seq2

Métodos:

    pegaValor(i, j)     // recebe uma posição i,j na matrix e compara a posição i-1,j-1
                        // das sequências, retornando o máximo valor de acordo com a fórmula dada
                        // além da operação escolhida (match/missmatch, gap na seq1, gap na seq2)
    

    alinha():
        Preenche a coluna 0 da matrizDeTraceBack com 'u'
        Preenche a linha 0 da matrizDeTraceBack com 'l'
        Assina a posição (0, 0) da matrizDeTraceBack com 'f'

        Preenche a coluna 0 da matrizAlinhamento com valor da linha anterior + penalidadeGap
        Preenche a linha 0 da matrizAlinhamento com valor da coluna anterior + penalidadeGap
        Assina a posição (0, 0) da matrizDeTraceBack com 0

        Para i, j da matrizAlinhamento:
            Se i ou j forem iguais a 0:
                Pula iteração   // pois já foram preenchidos
            
            matrizAlinhamento[i][j], operação = pegaValor(i, j)
            matrizDeTraceBack[i][j] = operação

        scoreFinal = última i,j da matrizAlinhamento
        fazAlinhamento()


    fazAlinhamento():
        string1 = ''
        string2 = ''

        OperaçãoAtual = matrizDeTraceBack[último i][último j]
        i,j = últimos i,j da matrizDeTraceBack

        Enquanto OperaçãoAtual != 'f':

            Se OperaçãoAtual for 'd' (diagonal):
                string1 recebe o caractere i da seq1    // ou seja, alinha
                string2 recebe o caractere j da seq2    // ou seja, alinha
                i = i-1
                j = j-1
            
            Se OperaçãoAtual for 'l' (esquerda):
                string1 recebe -    // ou seja, recebe um gap
                string2 recebe o caractere j da seq2    // ou seja, alinha
                j = j-1
            
            Se OperaçãoAtual for 'u' (cima):
                string1 recebe o caractere i da seq1    // ou seja, alinha
                string2 recebe -    // ou seja, recebe um gap
                i = i-1

        calculaIdentidade()
    
    calculaIdentidade():
        Conta o número n da maior string final entre as duas alinhadas
        identidade =    número de caracteres  iguais nas mesmas posições das
                        das strings 1 e 2 alinhadas, dividido por n



// Com a classe definida, podemos prosseguir com os alinhamentos

gap = -4
match = 5
missmatch = -3

scores = {}     // dicionário do tipo "humano vs animal": (score, identidade)

Para cada animal:
    alinhador = Alinhador(seqHumana, seqAnimalAtual, gap, missmatch, match)
    alinhador.alinha()
    scores["humano vs animalAtual"] = (alinhador.scoreFinal, alinhador.identidade)
    
Dentre todos os alinhamentos realizados:
Pega (mostra) o com maior valor de score final 
Se tiver outro com mesmo valor, desempata com a identidade
Se ambos score e identidade forem iguais, lista todos estes melhores alinhamentos que empataram








